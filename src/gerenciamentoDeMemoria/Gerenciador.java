package gerenciamentoDeMemoria;

import java.util.ArrayList;
import javax.swing.JOptionPane;

public class Gerenciador extends javax.swing.JFrame {

    Gerenciamento gerenciamento = new Gerenciamento();
    Processo p = new Processo();
    int tamanhoMemoria = 50;
    
    boolean carregouA = false;
    boolean carregouB = false;
    boolean carregouC = false;
    boolean carregouD = false;
    boolean carregouE = false;
    
    String erro01 = "Operação ilegal! Índice fora dos limites!";
    String erro02 = "Você deve carregar um processo antes de gravar um valor!";
    String erro03 = "Você deve fornecer um endereço antes de gravar!";
    String erro04 = "Você deve fornecer um valor antes de gravar!";

    /**
     * Creates new form Gerenciador
     */
    public Gerenciador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaProcessos = new javax.swing.JTable();
        btnCarregar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        listaProcessos = new javax.swing.JComboBox<>();
        labelEndereco = new javax.swing.JLabel();
        labelValor = new javax.swing.JLabel();
        txtEndereco = new javax.swing.JTextField();
        txtValor = new javax.swing.JTextField();
        btnGravar = new javax.swing.JButton();
        labelBase = new javax.swing.JLabel();
        labelLimite = new javax.swing.JLabel();
        txtBase = new javax.swing.JTextField();
        txtLimite = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gerenciamento de Memória");
        setResizable(false);

        tabelaProcessos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"0", null},
                {"1", null},
                {"2", null},
                {"3", null},
                {"4", null},
                {"5", null},
                {"6", null},
                {"7", null},
                {"8", null},
                {"9", null},
                {"10", null},
                {"11", null},
                {"12", null},
                {"13", null},
                {"14", null},
                {"15", null},
                {"16", null},
                {"17", null},
                {"18", null},
                {"19", null},
                {"20", null},
                {"21", null},
                {"22", null},
                {"23", null},
                {"24", null},
                {"25", null},
                {"26", null},
                {"27", null},
                {"28", null},
                {"29", null},
                {"30", null},
                {"31", null},
                {"32", null},
                {"33", null},
                {"34", null},
                {"35", null},
                {"36", null},
                {"37", null},
                {"38", null},
                {"39", null},
                {"40", null},
                {"41", null},
                {"42", null},
                {"43", null},
                {"44", null},
                {"45", null},
                {"46", null},
                {"47", null},
                {"48", null},
                {"49", null}
            },
            new String [] {
                "Endereço", "Conteúdo"
            }
        ));
        jScrollPane1.setViewportView(tabelaProcessos);

        btnCarregar.setText("Carregar");
        btnCarregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarregarActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        listaProcessos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Processo A", "Processo B", "Processo C", "Processo D", "Processo E" }));
        listaProcessos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaProcessosActionPerformed(evt);
            }
        });

        labelEndereco.setText("Endereço:");

        labelValor.setText("Valor:");

        btnGravar.setText("Gravar");
        btnGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarActionPerformed(evt);
            }
        });

        labelBase.setText("Reg. Base:");

        labelLimite.setText("Reg. Limiite:");

        txtBase.setEditable(false);

        txtLimite.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(listaProcessos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelBase)
                            .addComponent(labelLimite))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtLimite, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                            .addComponent(txtBase)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(labelValor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(labelEndereco)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGravar)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listaProcessos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelBase)
                    .addComponent(txtBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelLimite)
                    .addComponent(txtLimite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelEndereco)
                    .addComponent(txtEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGravar)
                    .addComponent(labelValor))
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCarregar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(btnCarregar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCarregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarregarActionPerformed
        if (listaProcessos.getSelectedItem() == "Processo A" && !carregouA) {
            Processo pr = p.obterProcesso("Processo A");
            gerenciamento.setValorRegistradores(pr);
            txtBase.setText(Integer.toString(pr.getRegBase()));
            txtLimite.setText(Integer.toString(pr.getRegLimite()));
            carregouA = true;
            
        } else if (listaProcessos.getSelectedItem() == "Processo B" && !carregouB) {
            Processo pr = p.obterProcesso("Processo B");
            gerenciamento.setValorRegistradores(pr);
            txtBase.setText(Integer.toString(pr.getRegBase()));
            txtLimite.setText(Integer.toString(pr.getRegLimite()));
            carregouB = true;
            
        } else if (listaProcessos.getSelectedItem() == "Processo C" && !carregouC) {
            Processo pr = p.obterProcesso("Processo C");
            gerenciamento.setValorRegistradores(pr);
            txtBase.setText(Integer.toString(pr.getRegBase()));
            txtLimite.setText(Integer.toString(pr.getRegLimite()));
            carregouC = true;
            
        } else if (listaProcessos.getSelectedItem() == "Processo D" && !carregouD) {
            Processo pr = p.obterProcesso("Processo D");
            gerenciamento.setValorRegistradores(pr);
            txtBase.setText(Integer.toString(pr.getRegBase()));
            txtLimite.setText(Integer.toString(pr.getRegLimite()));
            carregouD = true;
            
        } else if (listaProcessos.getSelectedItem() == "Processo E" && !carregouE) {
            Processo pr = p.obterProcesso("Processo E");
            gerenciamento.setValorRegistradores(pr);
            txtBase.setText(Integer.toString(pr.getRegBase()));
            txtLimite.setText(Integer.toString(pr.getRegLimite()));
            carregouE = true;
        }
    }//GEN-LAST:event_btnCarregarActionPerformed

    private void btnGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarActionPerformed
        if(txtEndereco.getText() == null || txtEndereco.getText().equals("")) {
            JOptionPane.showMessageDialog(null, erro03);
        } if(txtValor == null || txtValor.getText().equals("")) {
            JOptionPane.showMessageDialog(null, erro04);
        }
        if (listaProcessos.getSelectedItem() == "Processo A" && carregouA) {
            Processo pr = p.obterProcesso("Processo A");
            int t = pr.getValorProcesso();
            int endereco = Integer.parseInt(txtEndereco.getText());
            if(endereco < t + pr.getRegBase() && endereco >= pr.getRegBase()) {
                String valor = txtValor.getText();
                tabelaProcessos.setValueAt(valor, endereco, 1);
            } else {
                JOptionPane.showMessageDialog(null, erro01);
            }
            
        } else if (listaProcessos.getSelectedItem() == "Processo B" && carregouB) {
            Processo pr = p.obterProcesso("Processo B");
            int t = pr.getValorProcesso();
            int endereco = Integer.parseInt(txtEndereco.getText());
            if(endereco < t + pr.getRegBase() && endereco >= pr.getRegBase()) {
                String valor = txtValor.getText();
                tabelaProcessos.setValueAt(valor, endereco, 1);
            } else {
                JOptionPane.showMessageDialog(null, erro01);
            }
            
        } else if (listaProcessos.getSelectedItem() == "Processo C" && carregouC) {
            Processo pr = p.obterProcesso("Processo C");
            int t = pr.getValorProcesso();
            int endereco = Integer.parseInt(txtEndereco.getText());
            if(endereco < t + pr.getRegBase() && endereco >= pr.getRegBase()) {
                String valor = txtValor.getText();
                tabelaProcessos.setValueAt(valor, endereco, 1);
            } else {
                JOptionPane.showMessageDialog(null, erro01);
            }
            
        } else if (listaProcessos.getSelectedItem() == "Processo D" && carregouD) {
            Processo pr = p.obterProcesso("Processo D");
            int t = pr.getValorProcesso();
            int endereco = Integer.parseInt(txtEndereco.getText());
            if(endereco < t + pr.getRegBase() && endereco >= pr.getRegBase()) {
                String valor = txtValor.getText();
                tabelaProcessos.setValueAt(valor, endereco, 1);
            } else {
                JOptionPane.showMessageDialog(null, erro01);
            }
            
        } else if (listaProcessos.getSelectedItem() == "Processo E" && carregouE) {
            Processo pr = p.obterProcesso("Processo E");
            int t = pr.getValorProcesso();
            int endereco = Integer.parseInt(txtEndereco.getText());
            if(endereco < t + pr.getRegBase() && endereco >= pr.getRegBase()) {
                String valor = txtValor.getText();
                tabelaProcessos.setValueAt(valor, endereco, 1);
            } else {
                JOptionPane.showMessageDialog(null, erro01);
            }
            
        } else {
            JOptionPane.showMessageDialog(null, erro02);
        }
    }//GEN-LAST:event_btnGravarActionPerformed

    private void listaProcessosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaProcessosActionPerformed
        if (listaProcessos.getSelectedItem() == "Processo A") {
            Processo pr = p.obterProcesso("Processo A");
            txtBase.setText(Integer.toString(pr.getRegBase()));
            txtLimite.setText(Integer.toString(pr.getRegLimite()));
            
        } else if (listaProcessos.getSelectedItem() == "Processo B") {
            Processo pr = p.obterProcesso("Processo B");
            txtBase.setText(Integer.toString(pr.getRegBase()));
            txtLimite.setText(Integer.toString(pr.getRegLimite()));
            
        } else if (listaProcessos.getSelectedItem() == "Processo C") {
            Processo pr = p.obterProcesso("Processo C");
            txtBase.setText(Integer.toString(pr.getRegBase()));
            txtLimite.setText(Integer.toString(pr.getRegLimite()));
            
        } else if (listaProcessos.getSelectedItem() == "Processo D") {
            Processo pr = p.obterProcesso("Processo D");
            txtBase.setText(Integer.toString(pr.getRegBase()));
            txtLimite.setText(Integer.toString(pr.getRegLimite()));
            
        } else if (listaProcessos.getSelectedItem() == "Processo E") {
            Processo pr = p.obterProcesso("Processo E");
            txtBase.setText(Integer.toString(pr.getRegBase()));
            txtLimite.setText(Integer.toString(pr.getRegLimite()));
        }
    }//GEN-LAST:event_listaProcessosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gerenciador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gerenciador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gerenciador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gerenciador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gerenciador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCarregar;
    private javax.swing.JButton btnGravar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelBase;
    private javax.swing.JLabel labelEndereco;
    private javax.swing.JLabel labelLimite;
    private javax.swing.JLabel labelValor;
    private javax.swing.JComboBox<String> listaProcessos;
    private javax.swing.JTable tabelaProcessos;
    private javax.swing.JTextField txtBase;
    private javax.swing.JTextField txtEndereco;
    private javax.swing.JTextField txtLimite;
    private javax.swing.JTextField txtValor;
    // End of variables declaration//GEN-END:variables
}
